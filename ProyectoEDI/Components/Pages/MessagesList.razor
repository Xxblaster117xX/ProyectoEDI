@page "/MessagesList"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using Entities.Model.Enum
@using Entities.Entidades_Definicion
@inject IJSRuntime JS
@using BusinessLogic.Definition
@inject MessageManager messageManager

@if (showNotification)
{
    <div class="alert alert-success text-center" role="alert">
        @notificationMessage
    </div>
}
<h3>Lista de Mensajes</h3>
<!--Tabla para mostrar un mensaje con sus respectivos campos-->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Tipo</th>
            <th>Versión</th>
            <th>Nombre</th>
            <th>Release</th>
            <th>Directorio</th>
            <th>Descripción</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (messageManager.GetAllMessages != null && messageManager.GetAllMessages().Any())
        {
            @foreach (var message in messageManager.GetAllMessages())
            {
                <tr>
                    <td>@message.MessageType</td>
                    <td>@message.MessageVersion</td>
                    <td>@message.MessageName</td>
                    <td>@message.MessageRelease</td>
                    <td>@message.MessageDirectoryVersion</td>
                    <td>@message.MessageDescription</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewMessage(message)">Ver</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMessage(message)">Eliminar</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => GoEditMessage(message)">Modificar</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center">No hay mensajes disponibles.</td>
            </tr>
        }
    </tbody>
</table>
<!--En caso de Borrar un mensaje aparecerá el la confirmación-->
@if (showPopUp)
{
    <div class="overlay">
        <div class="popup">
            <h4>¿Confirmar Eliminación?</h4>
            <p>¿Estás seguro de que deseas eliminar el mensaje: <strong>@messageToDelete.MessageName</strong>?</p>
            <div class="popup-buttons">
                <button class="btn btn-danger" @onclick="ConfirmDeleteMessage">Eliminar</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    // Variables
    private bool showPopUp = false;
    private bool isEditing = false;
    private Message messageToDelete;
    private Message messageBeingEdited;
    private string notificationMessage = string.Empty;
    private bool showNotification = false;

    [Parameter]
    public string success { get; set; }

    // Método para viajar a un mensaje(Aún sin funcionar porque no hay vista de detalles del mensaje)
    public void ViewMessage(Message message)
    {
        Navigation.NavigateTo($"/MessageDetails/{message.MessageId}");
    }

    /// <summary>
    /// Método para borrar un mensaje, seguidamente aparecerá para confirmar
    /// </summary>
    private async Task DeleteMessage(Message message)
    {
        messageToDelete = message;
        showPopUp = true;
    }

    /// <summary>
    /// Confirmar el borrado del mensaje
    /// </summary>
    private async Task ConfirmDeleteMessage()
    {
        if (messageToDelete != null)
        {
            messageManager.GetAllMessages().Remove(messageToDelete);
            messageToDelete = null;
            showNotification = true;
            notificationMessage = "El mensaje ha sido borrado con éxito";
            showPopUp = false;
            await Task.Delay(3000);
            showNotification = false;
        }
    }

    /// <summary>
    /// Manejar la cancelación del mensaje
    /// </summary>
    private void HandleCancel()
    {
        showPopUp = false;
        messageToDelete = null;
    }

    /// <summary>
    /// Método para viajar a la página de edición de un mensaje
    /// </summary>
    private void GoEditMessage(Message message)
    {
        Navigation.NavigateTo($"/ModifyMessageList/{message.MessageId}");
    }

    /// <summary>
    /// Inicialización de la página para manejar notificaciones
    /// </summary>
    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(success))
        {
            if (success == "modified")
            {
                notificationMessage = "El mensaje ha sido modificado con éxito.";
                showNotification = true;
            }
        }
    }
}
