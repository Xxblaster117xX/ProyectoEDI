@page "/MessagesList"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities
@using Entities.Model.Enum
@using Entities.Entidades_Definicion
@using BusinessLogic.Definition
@inject MessageManager messageManager
@inject IJSRuntime JS


<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<h3>Lista de Mensajes</h3>

<!--Tabla para mostrar un mensaje con sus respectivos campos-->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Tipo</th>
            <th>Versión y fecha del mensaje</th>
            <th>Nombre</th>
            <th>Directorio</th>
            <th>Descripción</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (messageManager.GetAllMessages != null && messageManager.GetAllMessages().Any())
        {
            @foreach (var message in messageManager.GetAllMessages())
            {
                <tr>
                    <td>@message.MessageType</td>
                    <td>@message.MessageVersion @message.MessageRelease</td>
                    <td>@message.MessageName</td>
                    <td>@message.MessageDirectoryVersion</td>
                    <td>@message.MessageDescription</td>

                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewMessage(message)">Ver</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMessage(message)">Eliminar</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => GoEditMessage(message)">Modificar</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center">No hay mensajes disponibles.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Popup de confirmación -->
@if (showPopUp)
{
    <div class="overlay">
        <div class="popup">
            <h4>¿Confirmar Eliminación?</h4>
            <p>¿Estás seguro de que deseas eliminar el mensaje: <strong>@messageToDelete.MessageName</strong>?</p>
            <div class="popup-buttons">
                <button class="btn btn-danger" @onclick="ConfirmDeleteMessage">Eliminar</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    private bool showPopUp = false;
    private Message messageToDelete;
    private string notificationMessage;

    public void ViewMessage(Message message)
    {
        Navigation.NavigateTo($"/MessageDetails/{message.MessageId}");
    }

    private Task DeleteMessage(Message message)
    {
        messageToDelete = message;
        showPopUp = true;
        return Task.CompletedTask;
    }

    private async Task ConfirmDeleteMessage()
    {
        if (messageToDelete != null)
        {
            messageManager.GetAllMessages().Remove(messageToDelete);
            messageToDelete = null;

            ShowDeleteMessage(ToastType.Danger);

            showPopUp = false;

            StateHasChanged();
            await Task.Delay(3000); 

            StateHasChanged();
        }
    }

    private void HandleCancel()
    {
        showPopUp = false;
        messageToDelete = null;
    }

    private void GoEditMessage(Message message)
    {
        Navigation.NavigateTo($"/ModifyMessageList/{message.MessageId}");
    }

    private async Task OpenInNewTab(string url)
    {
        await JS.InvokeVoidAsync("openInNewTab", url);
    }

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("success", out var successValue))
        {
            if (successValue == "modified")
            {
                ShowModifyMessage(ToastType.Success);
              
            }
        }
    }


    private async Task HideNotificationAfterDelay()
    {
        StateHasChanged();
        await Task.Delay(3000);
        notificationMessage = null;
        StateHasChanged();
    }

    //Lista para almacenar los mensajes de notificación
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowDeleteMessage(ToastType toastType) => messages.Add(CreateDeleteToastMessage(toastType));

    private ToastMessage CreateDeleteToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje borrado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido borrado con éxito {DateTime.Now}",
        };

    private void ShowModifyMessage(ToastType toastType) => messages.Add(CreateModifyToastMessage(toastType));

    private ToastMessage CreateModifyToastMessage(ToastType toastType)
    => new ToastMessage
  {
      Type = toastType,
      Title = "Mensaje modificado",
      HelpText = $"{DateTime.Now}",
      Message = $"El mensaje ha sido modificado con éxito {DateTime.Now}",
  };

}
