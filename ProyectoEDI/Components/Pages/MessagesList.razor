@page "/MessagesList"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities
@using Entities.Model.Enum
@using Entities.Entidades_Definicion
@using BusinessLogic.Definition
@inject MessageManager messageManager
@inject IJSRuntime JS
@using AppLayer;
@inject MessageAppService messageAppService;

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<h3>Lista de Mensajes</h3>

<!--Tabla para mostrar un mensaje con sus respectivos campos-->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Tipo</th>
            <th>Versión y fecha del mensaje</th>
            <th>Nombre</th>
            <th>Directorio</th>
            <th>Descripción</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (messageAppService.GetAllMessages != null && messageAppService.GetAllMessages().Any())
        {
            @foreach (var message in messageAppService.GetAllMessages())
            {
                <tr>
                    <td>@message.MessageType</td>
                    <td>@message.Version @message.Release</td>
                    <td>@message.Name</td>
                    <td>@message.DirectoryVersion</td>
                    <td>@message.Description</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => GoViewMessage(message)">Ver</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMessage(message)">Eliminar</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => GoEditMessage(message)">Modificar</button>
                        <button class="btn btn-info btn-sm" @onclick="() => OpenEditPopup(message)">Modificar (popup)</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center">No hay mensajes disponibles.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Popup de confirmación de eliminación -->
@if (showPopUp)
{
    <div class="overlay">
        <div class="popup">
            <h4>¿Confirmar Eliminación?</h4>
            <p>¿Estás seguro de que deseas eliminar el mensaje: <strong>@messageToDelete.Name</strong>?</p>
            <div class="popup-buttons">
                <button class="btn btn-danger" @onclick="ConfirmDeleteMessage">Eliminar</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
            </div>
        </div>
    </div>
}

<!-- Popup de edición -->
@if (showEditPopup)
{
    <div class="overlayModification" style=" position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.6); z-index: 9999;">
        <div class="popupModification" style="background: #fff; padding: 30px; border-radius: 12px; box-shadow: 0 10px 25px rgba(0,0,0,0.3); text-align: center; max-width: 400px; width: 90%;">
            <h4>Modificar Mensaje</h4>
            <div class="mb-2">
                <label >Tipo:</label>
                <select class="form-control text-center" @bind="editMessage.MessageType">
                    @foreach (var tipo in Enum.GetValues<MessageTypeEnum>())
                    {
                        <option value="@tipo">@tipo</option>
                    }
                </select>
            </div>
            <div class="mb-2" >
                <label>Versión:</label>
                <input class="form-control text-center" @bind="editMessage.Version" />
            </div>
            <div class="mb-2">
                <label>Release:</label>
                <input class="form-control text-center" @bind="editMessage.Release" />
            </div>
            <div class="mb-2">
                <label>Nombre:</label>
                <input class="form-control text-center" @bind="editMessage.Name" />
            </div>
            <div class="mb-2">
                <label>Directorio:</label>
                <input class="form-control text-center" @bind="editMessage.DirectoryVersion" />
            </div>
            <div class="mb-2">
                <label>Descripción:</label>
                <textarea class="form-control text-center" @bind="editMessage.Description"></textarea>
            </div>
            <div class="popup-buttons" style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
                <button class="btn btn-success" @onclick="SaveEditMessage">Guardar</button>
                <button class="btn btn-secondary" @onclick="CancelEditPopup">Cancelar</button>
            </div>
        </div>
    </div>

}

@code {


    /// </summary> 
    /// Variable para el pop up de confirmación
    /// <summary>
 private bool showPopUp = false;

    /// <summary>
    /// Variable 
    /// </summary>
    private Message messageToDelete;
    private string notificationMessage;


    ///</summary>
    /// variable para el popUp de edición 
    ///<summary>
    private bool showEditPopup = false;

    /// <summary>
    /// Variable utilizada para cargar el mensaje de
    /// </summary>
    private Message editMessage = new Message();

   
    /// <summary>
    /// Método para borrar un mensaje.
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    private Task DeleteMessage(Message message)
    {
        messageToDelete = message;
        showPopUp = true;
        return Task.CompletedTask;
    }
    /// <summary>
    /// Método para confirmar la eliminación de un mensaje. cuando saque el popUp de eliminación.
    /// </summary>
    /// <returns></returns>
    private async Task ConfirmDeleteMessage()
    {
        if (messageToDelete != null)
        {
            messageManager.GetAllMessages().Remove(messageToDelete);
            messageToDelete = null;

            ShowDeleteMessage(ToastType.Danger);

            showPopUp = false;

            StateHasChanged();
            await Task.Delay(3000);

            StateHasChanged();
        }
    }
    /// <summary>
    /// Botón para cancelar la eliminación de un mensaje.
    /// </summary>
    private void HandleCancel()
    {
        showPopUp = false;
        messageToDelete = null;
    }

    /// <summary>
    /// Método para navegar a la página de modificación de un mensaje.
    /// </summary>
    /// <param name="message"></param>
    private void GoEditMessage(Message message)
    {
        Navigation.NavigateTo($"/ModifyMessageList/{message.Id}");
    }

    /// <summary>
    /// Método para abrir el popup de edición de un mensaje.
    /// </summary>
    /// <param name="message"></param>
    private void OpenEditPopup(Message message)
    {

        editMessage = new Message
            {
                Id = message.Id,
                MessageType = message.MessageType,
                Version = message.Version,
                Release = message.Release,
                DirectoryVersion = message.DirectoryVersion,
                Name = message.Name,
                Description = message.Description,
                MessagePositions = message.MessagePositions
            };
        showEditPopup = true;
    }

    /// <summary>
    /// Método para cancelar la edición de un mensaje.
    /// </summary>
    private void CancelEditPopup()
    {
        showEditPopup = false;
    }
    /// <summary>
    /// Método para guardar los cambios realizados en el mensaje en el PopUp de edición
    /// </summary>
    private void SaveEditMessage()
    {
        // Buscar el mensaje original y actualizar sus campos
        var original = messageManager.GetAllMessages().FirstOrDefault(m => m.Id == editMessage.Id);
        if (original != null)
        {
            original.MessageType = editMessage.MessageType;
            original.Version = editMessage.Version;
            original.Release = editMessage.Release;
            original.DirectoryVersion = editMessage.DirectoryVersion;
            original.Name = editMessage.Name;
            original.Description= editMessage.Description;
        }
        showEditPopup = false;
        ShowModifyMessage(ToastType.Success);
        StateHasChanged();
    }
    /// <summary>
    /// Método para abrir la modificación de un mensaje en una nueva pestaña(Aún sin hacer)
    /// </summary>
    /// <param name="url"></param>
    /// <returns></returns>
    private async Task OpenInNewTab(string url)
    {
        await JS.InvokeVoidAsync("openInNewTab", url);
    }

    /// <summary>
    /// Método para que al cargar la`página se muestre el toast de confirmación de modificación.
    /// </summary>
    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("success", out var successValue))
        {
            if (successValue == "modified")
            {
                ShowModifyMessage(ToastType.Success);
            }
        }
    }
    private void GoViewMessage(Message message)
    {
        Navigation.NavigateTo($"/Message-details/{message.Id}");
    }

    /// <summary>
    /// Ahora se muestra el mensaje de notificación y se oculta después de un retraso.(Ahora no se utiliza)
    /// </summary>
    /// <returns></returns>
    private async Task HideNotificationAfterDelay()
    {
        StateHasChanged();
        await Task.Delay(3000);
        notificationMessage = null;
        StateHasChanged();
    }

    //Lista para almacenar los mensajes de notificación
    List<ToastMessage> messages = new List<ToastMessage>();


    /// <summary>
    /// Este método se encarga de mostrar el mensaje de eliminación en la lista de mensajes.
    /// </summary>
    /// <param name="toastType"></param>
    private void ShowDeleteMessage(ToastType toastType) => messages.Add(CreateDeleteToastMessage(toastType));


    /// <summary>
    /// Método para crear un toast de eliminación.
    /// </summary>
    /// <param name="toastType"></param>
    /// <returns></returns>
    private ToastMessage CreateDeleteToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje borrado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido borrado con éxito {DateTime.Now}",
        };



    /// <summary>
    /// Este método se encarga de mostrar el mensaje de modificación en la lista de mensajes.
    /// </summary>
    /// <param name="toastType"></param>
    private void ShowModifyMessage(ToastType toastType) => messages.Add(CreateModifyToastMessage(toastType));

    /// <summary>
	/// Método para crear un toast de modificación.
	/// </summary>
	/// <param name="toastType"></param>
	/// <returns></returns>
	private ToastMessage CreateModifyToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje modificado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido modificado con éxito {DateTime.Now}",
        };
}
