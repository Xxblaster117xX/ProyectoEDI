@page "/modificar-segmento/{Id:int}"
@inject SegmentService SegmentService
@inject NavigationManager NavigationManager
@using Entities.Entidades_Representacion.Abstract
@using Entities.Entidades_Representacion.Segments
@using ProyectoEDI.Components.Services
@rendermode InteractiveServer

<div class="container d-flex justify-content-center align-items-center" style="margin-top: 5%">
    <div class="card p-4" style="width: 30rem;">
        <h3>Modificar Segmento</h3>
        @if (Segmento == null)
        {
            <p>Cargando segmento...</p>
        }
        else
        {
            <EditForm Model="@Segmento" OnValidSubmit="GuardarCambios">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group mb-3">
                    <label for="segmentCode">Código del Segmento:</label>
                    <InputText id="segmentCode" class="form-control" @bind-Value="@Segmento.SegmentCode" />
                </div>
                <div class="form-group mb-3">
                    <label for="segmentName">Nombre del Segmento:</label>
                    <InputText id="segmentName" class="form-control" @bind-Value="@Segmento.SegmentName" />
                </div>
                <div class="form-group mb-3">
                    <label for="segmentDescription">Descripción:</label>
                    <InputTextArea id="segmentDescription" class="form-control" @bind-Value="@Segmento.SegmentDescription" />
                </div>
                <div class="form-group mb-3">
                    <label for="obligatorio">Obligatorio:</label>
                    <InputCheckbox id="obligatorio" @bind-Value="@Segmento.Obligatory" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-danger">Guardar Cambios</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Segment Segmento; // Cambiado a una clase concreta

    //Metodo que se ejecuta al iniciar la pagina
    protected override async Task OnInitializedAsync()
    {
        var segments = SegmentService.GetSegments();

        if (!segments.Any())
        {
            SegmentService.AddSegment(new UnhSegment
                {
                    SegmentId = Id,
                });
        }

        Segmento = SegmentService.GetSegments().FirstOrDefault(s => s.SegmentId == Id);

        if (Segmento == null)
        {
            Console.WriteLine($"Segmento con ID {Id} no encontrado.");
            NavigationManager.NavigateTo("/listado-edi");
        }
    }

    // Método para guardar los cambios del segmento
    private async Task GuardarCambios()
    {
        // Simulación de guardado de datos, reemplazar con lógica real
        Console.WriteLine($"Guardando segmento con ID {Segmento.SegmentId}...");
        Console.WriteLine($"Código: {Segmento.SegmentCode}, Nombre: {Segmento.SegmentName}, Descripción: {Segmento.SegmentDescription}, Obligatorio: {Segmento.Obligatory}");

        // Llamar al servicio para actualizar el segmento (esto debe implementarse en SegmentService)
        SegmentService.UpdateSegment(Segmento);

        // Redirigir al listado de segmentos después de guardar
        NavigationManager.NavigateTo("/listado-edi");
    }
}
