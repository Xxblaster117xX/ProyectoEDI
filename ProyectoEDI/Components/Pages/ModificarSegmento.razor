@page "/modificar-segmento/{id:int}" 
@inject NavigationManager NavigationManager
@using Entities.Entidades_Definicion
@using Entities.Entidades_Representacion.Segments
@rendermode InteractiveServer

<div class="container d-flex justify-content-center align-items-center" style="margin-top: 5%">
    <div class="card p-4" style="width: 30rem;">
        <h3>Modificar Segmento</h3>
        @if (Segmento == null)
        {
            <p>Cargando segmento...</p>
        }
        else
        {
            <EditForm Model="@Segmento" OnValidSubmit="GuardarCambios">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group mb-3">
                    <label for="segmentCode">Código del Segmento:</label>
                    <InputText id="segmentCode" class="form-control" @bind-Value="@Segmento.SegmentCode" />
                </div>
                <div class="form-group mb-3">
                    <label for="segmentName">Nombre del Segmento:</label>
                    <InputText id="segmentName" class="form-control" @bind-Value="@Segmento.SegmentName" />
                </div>
                <div class="form-group mb-3">
                    <label for="segmentDescription">Descripción:</label>
                    <InputTextArea id="segmentDescription" class="form-control" @bind-Value="@Segmento.SegmentDescription" />
                </div>
                <div class="form-group mb-3">
                    <label for="obligatorio">Obligatorio:</label>
                    <InputCheckbox id="obligatorio" @bind-Value="@Segmento.Obligatory" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-danger">Guardar Cambios</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Segment Segmento; // Cambiado a una clase concreta

    private string Codigo = "0";
    private string Nombre = "un nombre";
    private string Desc = "descripcion";
    private bool Obl = false;

    //Metodo que se ejecuta al iniciar la pagina
    protected override async Task OnInitializedAsync()
    {

        Segmento = await ObtenerSegmentoPorId(id);
    }

    private async Task<Segment> ObtenerSegmentoPorId(int id)
    {


        await Task.Delay(500); // Simula un retraso
        return new Segment
        {
                SegmentId = id, //id recibido por parametro
                SegmentCode = Codigo,
                SegmentName = Nombre,
                SegmentDescription = Desc,
                Obligatory = Obl
            };
    }

    private async Task GuardarCambios()
    {
        // Simulación de guardado de datos (reemplazar con lógica real)
        await Task.Delay(500); // Simula un retraso
        Console.WriteLine($"Segmento con ID {id} guardado exitosamente.");
        Console.WriteLine(Segmento.SegmentCode);
        Console.WriteLine(Segmento.SegmentName);
        Console.WriteLine(Segmento.SegmentDescription);
        Console.WriteLine(Segmento.Obligatory);
    }
}
