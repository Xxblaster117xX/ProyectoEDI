@page "/modificar-segmento/{id:int}"
@inject NavigationManager NavigationManager
@using Entities.Entidades_Representacion.Abstract
@using Entities.Interfaces
@using Entities.Entidades_Representacion.Segments
@rendermode InteractiveServer

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4" style="width: 30rem;">
        <h3>Modificar Segmento</h3>
        @if (Segmento == null)
        {
            <p>Cargando segmento...</p>
        }
        else
        {
            <EditForm Model="@Segmento" OnValidSubmit="GuardarCambios">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group mb-3">
                    <label for="segmentCode">Código del Segmento:</label>
                    <InputNumber id="segmentCode" class="form-control" @bind-Value="@Segmento.SegmentCode" />
                </div>
                <div class="form-group mb-3">
                    <label for="segmentName">Nombre del Segmento:</label>
                    <InputText id="segmentName" class="form-control" @bind-Value="@Segmento.SegmentName" />
                </div>
                <div class="form-group mb-3">
                    <label for="segmentDescription">Descripción:</label>
                    <InputTextArea id="segmentDescription" class="form-control" @bind-Value="@Segmento.SegmentDescription" />
                </div>
                <div class="form-group mb-3">
                    <label for="obligatorio">Obligatorio:</label>
                    <InputCheckbox id="obligatorio" @bind-Value="@Segmento.Obligatorio" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-danger">Guardar Cambios</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private NadSegment Segmento; // Cambiado a una clase concreta

    private int Codigo = 0;
    private string Nombre = "";
    private string Desc = "";
    private bool Obl = false;

    protected override async Task OnInitializedAsync()
    {
        // Simulación de carga de datos (reemplazar con lógica real)
        Segmento = await ObtenerSegmentoPorId(id);
    }

    private async Task<NadSegment> ObtenerSegmentoPorId(int id)
    {

        // Simulación de carga de datos (reemplazar con lógica real)
        await Task.Delay(500); // Simula un retraso
        return new NadSegment
            {
                SegmentId = id,
                SegmentCode = Codigo,
                SegmentName = Nombre,
                SegmentDescription = Desc,
				Obligatorio = Obl
            };
    }

    private async Task GuardarCambios()
    {
        // Simulación de guardado de datos (reemplazar con lógica real)
        await Task.Delay(500); // Simula un retraso
        Console.WriteLine($"Segmento con ID {id} guardado exitosamente.");
    }
}
