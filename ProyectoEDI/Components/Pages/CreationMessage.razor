@rendermode InteractiveServer
@using AppLayer
@inject NavigationManager Navigation
@using Entities.Model.Enum
@using Entities.Entidades_Definicion;
@using Component;

@inject IJSRuntime JS


@page "/"

<form>
    <div class="mb-3">
        <label for="messageType" class="form-label">Message Type</label>
        <select class="form-select" id="messageType" @bind="messageTypeValue">
            @foreach (var type in Enum.GetValues(typeof(MessageTypeEnum)))
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="messageVersion" class="form-label">Message Version</label>
        <input type="text" class="form-control" id="messageVersion" @bind="messageVersionValue" placeholder="Enter message version">
    </div>
    <div class="mb-3">
        <label for="messageName" class="form-label">Message Name</label>
        <input type="text" class="form-control" id="messageName" @bind="messageNameValue" placeholder="Enter message name">
    </div>
    <div class="mb-3">
        <label for="messageDirectoryVersion" class="form-label">Message Directory Version</label>
        <input type="text" class="form-control" id="messageDirectoryVersion" @bind="messageDirectoryVersionValue" placeholder="Enter directory version">
    </div>
    <button type="button" id="btn-submit" @onclick="CreateMessage" class="btn btn-primary">Crear Mensaje</button>
</form>
@if (showPopUpMessage)
{
    <div class="overlay">
        <div class="popup">
            <h4>Mensaje Creado</h4>
            <p>Mensaje creado con éxito.¿Desea visualizarlo?</p>
            <div class="popup-buttons">
                <button class="btn btn-success" @onclick="HandleConfirm">Aceptar</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    private static int _currentId = 0;
    private string messageTypeValue;
    private string messageVersionValue;
    private string messageNameValue;
    private string messageDirectoryVersionValue;
  
    public bool showPopUpMessage = false;

    private int AutoIncrementId() => ++_currentId;

    private async Task CreateMessage()
    {
        if (string.IsNullOrWhiteSpace(messageNameValue))
            return;

        if (IsMessageNameSimilar(messageNameValue))
        {
            await ShowErrorAlert($"Ya existe un mensaje con el mismo nombre:   {messageNameValue}");
            return;
        }

        var message = new Message
            {
                MessageId = AutoIncrementId(),
                MessageType = Enum.Parse<MessageTypeEnum>(messageTypeValue),
                MessageVersion = messageVersionValue,
                MessageName = messageNameValue,
                MessageDirectoryVersion = messageDirectoryVersionValue,
                MessageRelease = messageVersionValue,
                MessageDescription = "Aquí iría la descripción del mensaje"
            };

        Message.MessagesList.Add(message);
        showPopUpMessage = true;
    }

    private void HandleConfirm()
    {
        showPopUpMessage = false;
        Navigation.NavigateTo("/MessagesList");
    }

    private void HandleCancel()
    {
        showPopUpMessage = false;
    }
    private bool IsMessageNameSimilar(string newName)
    {
        return Message.MessagesList.Any(m =>
            m.MessageName.Contains(newName, StringComparison.OrdinalIgnoreCase) ||
            newName.Contains(m.MessageName, StringComparison.OrdinalIgnoreCase));
    }
    
    private async Task ShowErrorAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);  
    }
  
}
