@rendermode InteractiveServer
@using AppLayer
@inject NavigationManager Navigation
@using Entities.Model.Enum
@using Entities.Entidades_Definicion;
@inject IJSRuntime JS
@using BusinessLogic.Definition
@inject MessageManager messageManager
@page "/"
<!--Formulario del mensaje-->
<form>
    <div class="mb-3">
        <label for="messageType" class="form-label">Tipo del mensaje </label>
        <select class="form-select" id="messageType" @bind="messageTypeValue">
            @foreach (var type in Enum.GetValues(typeof(MessageTypeEnum)))
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="messageName" class="form-label">Nombre del mensaje</label>
        <input type="text" class="form-control" id="messageName" @bind="messageNameValue" placeholder="Introduce el nombre del mensaje">
    </div>
    <div class="mb-3">
        <label for="messageVersion" class="form-label">Version del mensaje </label>
        <input type="text" class="form-control" id="messageVersion" @bind="messageVersionValue" placeholder="Introduce la version del mensaje">
    </div>

    <div class="mb-3">
        <label for="messageDirectoryVersion" class="form-label">Version de directorio del mensaje</label>
        <input type="text" class="form-control" id="messageDirectoryVersion" @bind="messageDirectoryVersionValue" placeholder="Introduce la version de directorio del mensaje">
    </div>
    <div class="mb-3">
        <label for="messageRelease" class="form-label">Fecha de lanzamiento</label>
        <input type="text" class="form-control" id="messageDirectoryVersion" @bind="messageReleaseValue" placeholder="Introduce la fecha de lanzamiento">
    </div>
    <button type="button" id="btn-submit" @onclick="CreateMessages" class="btn btn-success">Crear Mensaje</button>
</form>

<!--Confirmación cuando se crea un mensaje-->
@if (showPopUpMessage)
{   <div class="overlay">
        <div class="popUpConfirmation">
            <h4>Mensaje Creado</h4>
            <p>Mensaje creado con éxito.¿Desea visualizarlo?</p>
            <div class="popup-buttons">
                <button class="btn btn-success" @onclick="HandleConfirm">Aceptar</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
            </div>
        </div>
    </div>
}
@code {
    private static int _currentId = 0;
    private string messageTypeValue = string.Empty;
    private string messageVersionValue;
    private string messageNameValue;
    private string messageDirectoryVersionValue;
    private string messageReleaseValue;
    public bool showPopUpMessage = false;
   
    /// <summary>
    /// Método para aumentar en 1 el id al crear un mensaje
    /// </summary>
    /// <returns></returns>
    private int AutoIncrementId() => ++_currentId;

		
    /// <summary>
    /// Crear un mensaje, verificando que el nombre no sea igual a otro ya creado
    /// </summary>
    /// <returns></returns>
    private async Task CreateMessages()
    {
        if (string.IsNullOrWhiteSpace(messageNameValue))
            return;

        if (IsMessageNameSimilar(messageNameValue))
        {
            await ShowErrorAlert($"Ya existe un mensaje con el mismo nombre:{messageNameValue}");
            return;
        }

		if (string.IsNullOrWhiteSpace(messageTypeValue) || string.IsNullOrWhiteSpace(messageVersionValue) || string.IsNullOrWhiteSpace(messageNameValue) || string.IsNullOrWhiteSpace(messageDirectoryVersionValue))
		{
			await ShowErrorAlert("Por favor, completa todos los campos.");
			return;
		}
	

        else {var message = new Message
            {
                MessageId = AutoIncrementId(),
                MessageType = Enum.Parse<MessageTypeEnum>(messageTypeValue),
                MessageVersion = messageVersionValue,
                MessageName = messageNameValue,
                MessageDirectoryVersion = messageDirectoryVersionValue,
                MessageRelease = "A",
                MessageDescription = "Aquí iría la descripción del mensaje"
            };
			
            messageManager.AddMessage(message);
            var allMessages = messageManager.GetAllMessages();
            Console.WriteLine($"Total mensajes guardados: {message.MessageName}");
            showPopUpMessage = true;
        }
    }
    /// <summary>
    /// Método para el  caso de confirmar la visualización
    /// </summary>
    private void HandleConfirm()
    {
        showPopUpMessage = false;
        Navigation.NavigateTo("/MessagesList");
    }
    /// <summary>
    /// Método para el caso de cancelación
    /// </summary>
    private void HandleCancel()
    {
        showPopUpMessage = false;
    }

    /// <summary>
    /// Función para ver si el nombre del mensaje es similar a otro ya creado 
    /// </summary>
    /// <param name="newName"></param>
    /// <returns></returns>
    private bool IsMessageNameSimilar(string newName)
    {
        return messageManager.GetAllMessages().Any(m =>
            m.MessageName.Contains(newName, StringComparison.OrdinalIgnoreCase) ||
            newName.Contains(m.MessageName, StringComparison.OrdinalIgnoreCase));
    }
    /// <summary>
    /// Método para enseñar la alerta en caso de que el mensaje si que sea similar
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    private async Task ShowErrorAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);  
    }
}
