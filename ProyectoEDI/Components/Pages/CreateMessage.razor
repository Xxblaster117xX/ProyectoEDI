@page "/"
@rendermode InteractiveServer
@using AppLayer
@inject NavigationManager Navigation
@using Entities.Model.Enum
@using Entities.Entidades_Definicion
@inject IJSRuntime JS
@using BusinessLogic.Definition
@inject MessageManager messageManager
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Sqlite;
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Identity.UI
@using ProyectoEDI.Backend
@inject ApplicationDBContext DbContext

<h2>Datos del Mensaje</h2>

<!-- Formulario de creación de un mensaje-->
<EditForm Model="@this" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Tipo del mensaje</label>
        <InputSelect class="form-select" @bind-Value="messageTypeValue">
            <option disabled value="">-- Selecciona un tipo --</option>
            @foreach (var type in Enum.GetValues(typeof(MessageTypeEnum)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Nombre del mensaje</label>
        <InputText class="form-control" @bind-Value="messageNameValue" placeholder="Introduce el nombre del mensaje" />
    </div>

    <div class="mb-3">
        <label class="form-label">Versión del mensaje</label>
        <InputText class="form-control" @bind-Value="messageVersionValue" placeholder="Introduce la versión del mensaje" />
    </div>

    <div class="mb-3">
        <label class="form-label">Versión de directorio del mensaje</label>
        <InputText class="form-control" @bind-Value="messageDirectoryVersionValue" placeholder="Introduce la versión de directorio del mensaje" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha de lanzamiento</label>
        <InputText class="form-control" @bind-Value="messageReleaseValue" placeholder="Introduce la fecha de lanzamiento" />
    </div>

    <button type="submit" id="btn-submit" style="background-color:red">Crear Mensaje</button>
</EditForm>

@if (showPopUpMessage)
{
    <div class="overlay">
        <div class="popUpConfirmation">
            <h4>Mensaje Creado</h4>
            <p>Mensaje creado con éxito. ¿Desea visualizarlo?</p>
            <div class="popup-buttons">
                <button class="btn btn-success" @onclick="HandleConfirm">Aceptar</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Variable para incrementar el ID de los mensajes
    /// </summary>
    private static int _currentId = 0;
    /// <summary>
    /// Variable para asignar el tipo de mensaje
    /// </summary>
    private string messageTypeValue = string.Empty;
    /// <summary>
    /// Variable para asignar la versión del mensaje
    /// </summary>
    private string messageVersionValue = string.Empty;
    /// <summary>
    /// Variable para asignar el nombre del mensaje
    /// </summary>
    private string messageNameValue = string.Empty;
    /// <summary>
    /// Variable para asignar la versión de directorio del mensaje
    /// </summary>
    private string messageDirectoryVersionValue = string.Empty;
    /// <summary>
    /// Variable para asignar la fecha de lanzamiento del mensaje
    /// </summary>
    private string messageReleaseValue = string.Empty;
    /// <summary>
    /// Variable booleana para mostrar el popUp de confirmación
    /// </summary>
    public bool showPopUpMessage = false;

    /// <summary>
    /// Función para autoincrementar el ID de los mensajes
    /// </summary>
    /// <returns></returns>
    private int AutoIncrementId() => ++_currentId;

    /// <summary>
    /// Método para crear un nuevo mensaje
    /// </summary>
    /// <returns></returns>
    private async Task Create()
    {
        if (string.IsNullOrWhiteSpace(messageTypeValue) ||
            string.IsNullOrWhiteSpace(messageVersionValue) ||
            string.IsNullOrWhiteSpace(messageNameValue) ||
            string.IsNullOrWhiteSpace(messageDirectoryVersionValue) ||
            string.IsNullOrWhiteSpace(messageReleaseValue))
        {
			await ShowErrorAlert("Por favor, completa todos los campos.");//Si algún campo está vacío, se muestra un mensaje de error
            return;
        }

		if (IsMessageNameSimilar(messageNameValue))//Si el nombre ya existe, se muestra un mensaje de error
        {
            await ShowErrorAlert($"Ya existe un mensaje con el mismo nombre: {messageNameValue}");
            return;
        }
		// / Si el nombre no existe, se crea el mensaje
        var message = new Message
            {
                Id = AutoIncrementId(),
                MessageType = Enum.Parse<MessageTypeEnum>(messageTypeValue),
                Version= messageVersionValue,
                Name = messageNameValue,
                DirectoryVersion = messageDirectoryVersionValue,
                Release = messageReleaseValue,
                Description = "Aquí iría la descripción del mensaje"
            };

            //Se añade el mensaje a la lista para luego mostrar la lista del mensajes con el mensaje
        messageManager.AddMessage(message);
        //Se añade el mensaje a la base de datos
        DbContext.Messages.Add(message);
        Console.WriteLine($"Mensaje creado: {message.Name}");// Mostrar que el mensaje se ha creado por consola
		// Enseñar el popUp de confirmación
        showPopUpMessage = true;
    }
    /// <summary>
    /// Método para confirmar la creación del mensaje mediante el popUp  de confirmación
    /// </summary>
    private void HandleConfirm()
    {
        showPopUpMessage = false;
		Navigation.NavigateTo("/MessagesList?success=created");// Si se confirma, se redirige a la lista de mensajes
    }
    /// <summary>
    /// Método para cancelar la creación del mensaje
    /// </summary>
    private void HandleCancel()
    {
        showPopUpMessage = false;
    }
    /// <summary>
    /// Método que evalua si el nombre del mensaje ya existe
    /// </summary>
    /// <param name="newName"></param>
    /// <returns></returns>
    private bool IsMessageNameSimilar(string newName)
    {
        return messageManager.GetAllMessages().Any(m =>
            m.Name.Equals(newName, StringComparison.OrdinalIgnoreCase));
    }

    /// <summary>
	/// Método para mostrar un mensaje de error mediante un alert cuando el mensaje ya existe
	/// </summary>
	/// <param name="message"></param>
	/// <returns></returns>
	private async Task ShowErrorAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}
