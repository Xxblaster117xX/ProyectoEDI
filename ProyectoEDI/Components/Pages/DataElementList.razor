@page "/DataElementList"
@inject DataElementManager dataElementManager
@using Entities.Entidades_Definicion
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using Microsoft.AspNetCore.WebUtilities

<h3>Lista de DataElements</h3>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<!--Lista de elementos de datos-->
<table class="table">
    <thead>
        <tr>
            <th>Code</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Formato de Valor</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (dataElementList != null && dataElementList.Any())
            @foreach (var element in dataElementList)
            {
                <tr>
                    <td>@element.Code</td>
                    <td>@element.Name</td>
                    <td>@element.Description</td>
                    <td>@element.ValueFormat</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => Modify(element.Code)">Modificar</button>
                        <button class="btn btn-info" @onclick="() => OpenEditPopup(element)">ModificarPopUp</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeletePopup(element.Code)">Eliminar</button>
                    </td>
                </tr>
            }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No hay elementos de datos disponibles.</td>
            </tr>
        }   
    </tbody>
</table>

<!--Pop de modificación de un elemento de dato que aparece al pulsar el botón de modificar-->
@if (showEditPopup)
{
    <div class="overlay">
        <div class="popUpConfirmation">
            <h4>Editar DataElement</h4>
            <div class="mb-2">
                <label>Nombre:</label>
                <input class="form-control" @bind="EditDataElement.Name" />
            </div>
            <div class="mb-2">
                <label>Descripción:</label>
                <input class="form-control" @bind="EditDataElement.Description" />
            </div>
            <div class="mb-2">
                <label>Formato:</label>
                <input class="form-control" @bind="EditDataElement.ValueFormat" />
            </div>
            <div class="popup-buttons">
                <button class="btn btn-success" @onclick="SaveEdit">Guardar</button>
                <button class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
            </div>
        </div>
    </div>
}

<!-- Popup personalizado para confirmar eliminación -->
@if (showPopUpDelete)
{
    <div class="overlay">
        <div class="popUpConfirmation">
            <h4>¿Confirmar Eliminación?</h4>
            <p>¿Está seguro de que desea eliminar el elemento de dato?</p>
            <div class="popup-buttons">
                <button class="btn btn-danger" @onclick="ConfirmDelete">Eliminar</button>
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Variables para almacenar la lista de DataElements y el ID del elemento a eliminar
    /// </summary>
    private List<DataElement> dataElementList;
    private int elementIdToDelete;
    DataElement dataElement = new DataElement();
    private bool showPopUpDelete = false;
    private DataElement EditDataElement = new DataElement();
    private bool showEditPopup = false;

    /// <summary>
    /// Al incializar la página, se obtienen todos los DataElements
    /// </summary>
    protected override void OnInitialized()
    {
        dataElementList = dataElementManager.GetAllDataElements();
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("success", out var successValue))
        {
            if (successValue == "modified")
            {
                ShowModifyDataElement(ToastType.Success);
            }
        }
    }

    /// <summary>
    /// Método para viajar a la página de modificación de un dataElement
    /// </summary>
    /// <param name="id"></param>
    private void Modify(int id)
    {
        Navigation.NavigateTo($"/ModifyDataElement/{id}");
    }

    /// <summary>
    /// Enlazar el popup de confirmación de eliminación
    /// </summary>
    /// <param name="id"></param>
    private void ShowDeletePopup(int id)
    {
        elementIdToDelete = id;
        showPopUpDelete = true;
    }

    /// <summary>
    /// Abrir popup de edición
    /// </summary>
    /// <param name="dataElement"></param>
    private void OpenEditPopup(DataElement dataElement)
    {
        EditDataElement = new DataElement
            {
                Code = dataElement.Code,
                Name = dataElement.Name,
                Description = dataElement.Description,
                ValueFormat = dataElement.ValueFormat,
            };
        showEditPopup = true;
    }




    /// <summary>
    /// Confirmar la eliminación del DataElement
    /// </summary>
    /// <returns></returns>
    private async Task ConfirmDelete()
    {
        dataElementManager.DeleteDataElement(elementIdToDelete);
        dataElementList = dataElementManager.GetAllDataElements();

        showPopUpDelete = false;

        // Mostrar notificación
        ShowDeleteDataElement(ToastType.Danger);
        StateHasChanged();
    }
    /// <summary>
    /// Método para cancelar el guardado del elemento de dato(Cierra el pop up sin guardar el elemento de dato)
    /// </summary>
    private void CancelEdit()
    {
        showEditPopup = false;
    }

    /// <summary>
	/// Método para guardar los cambios realizados en el DataElement
	/// </summary>
	private void SaveEdit()
    {
        // Busca el elemento original por Code (identificador único)
        var original = dataElementList.FirstOrDefault(e => e.Code == EditDataElement.Code);
        if (original != null)
        {
            original.Name = EditDataElement.Name;
            original.Description = EditDataElement.Description;
            original.ValueFormat = EditDataElement.ValueFormat;

            // Actualiza en la base de datos o backend
            dataElementManager.UpdateDataElement(original);

            // Refresca la lista (opcional, si UpdateDataElement ya lo hace puedes omitir)
            dataElementList = dataElementManager.GetAllDataElements();

            ShowModifyDataElement(ToastType.Success);
        }
        showEditPopup = false;
        StateHasChanged();
    }


    /// <summary>
    /// Al pulsar el botón de cancelar se cierra el popup
    /// </summary>
    private void CancelDelete()
    {
        showPopUpDelete = false;
    }
    [Parameter]
    [SupplyParameterFromQuery]
    public string success { get; set; }

    /// <summary>
    /// Lista para los mensajes toast
    /// </summary>
    List<ToastMessage> messages = new List<ToastMessage>();

    /// <summary>
    /// Método para mostrar el mensaje de notificación mediante el tipo de toastType
    /// </summary>
    /// <param name="toastType"></param>
    private void ShowDeleteDataElement(ToastType toastType) => messages.Add(CreateDeleteToastDataElement(toastType));


    /// <summary>
    /// Método para crear el mensaje de borrado en el toast
    /// </summary>
    /// <param name="toastType"></param>
    /// <returns></returns>
    private ToastMessage CreateDeleteToastDataElement(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje borrado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido borrado con éxito {DateTime.Now}",
        };

    /// <summary>
    /// Método para mostrar el mensaje de modificación en el toast
    /// </summary>
    /// <param name="toastType"></param>
    private void ShowModifyDataElement(ToastType toastType) => messages.Add(CreateModifyToastDataElement(toastType));

    /// <summary>
    /// Método para crear el mensaje de modificación en el toast
    /// </summary>
    /// <param name="toastType"></param>
    /// <returns></returns>
    private ToastMessage CreateModifyToastDataElement(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje modificado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido modificado con éxito {DateTime.Now}",
        };
 
}
