@page "/DataElementList"
@inject DataElementManager dataElementManager
@using Entities.Entidades_Definicion
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h3>Lista de DataElements</h3>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Formato de Valor</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
        @if (dataElementList != null && dataElementList.Any())
            @foreach (var element in dataElementList)
            {
                <tr>
                    <td>@element.Code</td>
                    <td>@element.DataElementName</td>
                    <td>@element.DataElementDescription</td>
                    <td>@element.DataElementValueFormat</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => Modify(element.Code)">Modificar</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeletePopup(element.Code)">Eliminar</button>
                    </td>
                </tr>
            }
        else
        {
           <tr>
                <td colspan="5" class="text-center">No hay elementos de datos disponibles.</td>
           </tr>
        }   
        </tbody>
    </table>



<!-- Popup personalizado para confirmar eliminación -->
@if (showPopUpDelete)
{
    <div class="overlay">
        <div class="popUpConfirmation">
            <h4>¿Confirmar Eliminación?</h4>
            <p>¿Está seguro de que desea eliminar el elemento de dato?</p>
            <div class="popup-buttons">
                <button class="btn btn-danger" @onclick="ConfirmDelete">Eliminar</button>
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Variables para almacenar la lista de DataElements y el ID del elemento a eliminar
    /// </summary>
    private List<DataElement> dataElementList;
    private int elementIdToDelete;
    DataElement dataElement = new DataElement();
    private bool showPopUpDelete = false;
  

    /// <summary>
    /// Al incializar la página, se obtienen todos los DataElements
    /// </summary>
    protected override void OnInitialized()
    {
        dataElementList = dataElementManager.GetAllDataElements();
    }

    /// <summary>
    /// Método para viajar a la página de modificación de un dataElement
    /// </summary>
    /// <param name="id"></param>
    private void Modify(int id)
    {
        Navigation.NavigateTo($"/ModifyDataElement/{id}");
    }

    /// <summary>
    /// Enlazar el popup de confirmación de eliminación
    /// </summary>
    /// <param name="id"></param>
    private void ShowDeletePopup(int id)
    {
        elementIdToDelete = id;
        showPopUpDelete = true;
    }
    /// <summary>
    /// Confirmar la eliminación del DataElement
    /// </summary>
    /// <returns></returns>
    private async Task ConfirmDelete()
    {
        dataElementManager.DeleteDataElement(elementIdToDelete);
        dataElementList = dataElementManager.GetAllDataElements();

        showPopUpDelete = false;

        // Mostrar notificación
		ShowDeleteDataElement(ToastType.Danger);
        StateHasChanged();
    }

    /// <summary>
	/// Al pulsar el botón de cancelar se cierra el popup
	/// </summary>
	private void CancelDelete()
    {
        showPopUpDelete = false;
    }
    [Parameter]
    [SupplyParameterFromQuery]
    public string success { get; set; }

    //Lista para almacenar los mensajes de notificación
    List<ToastMessage> messages = new List<ToastMessage>();

	// Método para mostrar el mensaje de notificación
    private void ShowDeleteDataElement(ToastType toastType) => messages.Add(CreateDeleteToastDataElement(toastType));

	
    // Método para crear un mensaje de notificación
    private ToastMessage CreateDeleteToastDataElement(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje borrado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido borrado con éxito {DateTime.Now}",
        };

    // Método para mostrar el mensaje de notificación
    private void ShowModifyDataElement(ToastType toastType) => messages.Add(CreateModifyToastDataElement(toastType));

    //
    // Método para crear un mensaje de notificación
    private ToastMessage CreateModifyToastDataElement(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje borrado",
            HelpText = $"{DateTime.Now}",
            Message = $"El mensaje ha sido borrado con éxito {DateTime.Now}",
        };
 
}
