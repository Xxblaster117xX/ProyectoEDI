@page "/listarComposite"
@using BusinessLogic
@inject CompositeManager CompositeManager
@inject NavigationManager Navigation
<PageTitle>Listado de Segmentos</PageTitle>
@* @if (showNotification) *@
@* { *@
@*     <div class="alert alert-success text-center" role="alert"> *@
@*         @notificationComposite *@
@*     </div> *@
@* } *@

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<h3 class="text-center">Listado de Elementos de Dato Compuesto</h3>
<div class="container">
    <table class="table table-striped table-bordered">
        <thead class="table-danger">
            <tr>               

                <th class="text-center">Código</th>
                <th class="text-center">Nombre</th>
                <th class="text-center">Descripción</th>
                <th class="text-center">Data Elements</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody>
            <!--si existe algun composite en la lista lo mostramos, 


            -->
            @if (CompositeManager.GetAll() != null && CompositeManager.GetAll().Count > 0)
            {
                @foreach (var composite in CompositeManager.GetAll())
                {
                    <tr>

                        <td class="text-center">@composite.Code</td>
                        <td class="text-center">@composite.Name</td>
                        <td class="text-center">@composite.Description</td>
                        <td class="text-center">
                            @foreach (var de in composite.DataElements)
                            {
                                <p>@de.Code</p>
                            }

                        </td>
                        <td class="text-center">
                            <button class="btn btn-primary">Ver</button>
                            <button class="btn btn-danger" @onclick="() => DeleteComposite(composite) ">Eliminar</button>
                            <button class="btn btn-warning" @onclick="()=> GoModify(composite.Id)">Modificar</button>
                        </td>
                    </tr>
                }
            }
            else

            {
                <tr>
                    <td colspan="7" class="text-center">No existen Elementos de Dato Compuesto.</td>
                </tr>
            }
        </tbody>
    </table>

    <!--En caso de Borrar un composite aparecerá el la confirmación-->
    @if (showPopUp)
    {
        <div class="overlay">
            <div class="popup">
                <h4>¿Confirmar Eliminación?</h4>
                <p>¿Estás seguro de que deseas eliminar el mensaje: <strong>@compositeToDelete.Name</strong>?</p>
                <div class="popup-buttons">
                    <button class="btn btn-danger" @onclick="ConfirmDeleteComposite">Eliminar</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
                </div>
            </div>
        </div>
    }
</div>

@code {

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType) => new ToastMessage
        {
            Type = toastType,
            Title = "Elimninación Composite.",
            HelpText = $"{DateTime.Now}",
            Message = $"Elemento de dato compuesto eliminado con éxito.",
        }; 
    
    private bool showPopUp = false;
    private bool showNotification = false;
    private string notificationComposite = string.Empty;
    private CompositeDataElement compositeToDelete;


    /// <summary>
    /// Método para borrar un composite, seguidamente aparecerá para confirmar
    /// </summary>
    /// <param name="message"></param>
    private async Task DeleteComposite(CompositeDataElement composite)
    {
        compositeToDelete = composite;
        showPopUp = true;
    }
    /// <summary>
    /// Confirmar el borrado del mensaje
    /// </summary>
    private async Task ConfirmDeleteComposite()
    {
        if (compositeToDelete != null)
        {
            CompositeManager.GetAll().Remove(compositeToDelete);

            showNotification = true;
           
            showPopUp = false;
            await Task.Delay(3000);
            showNotification = false;
            ShowMessage(ToastType.Success);
        }
    }



    /// <summary>
    /// Manejar la cancelación del segmento
    /// </summary>
    private void HandleCancel()
    {
        showPopUp = false;

    }

    // método para navegar a la vista de ModificarComposite
    private void GoModify(int id)
    {
        Navigation.NavigateTo($"/modificarComposite/{id}");
    }
}
