@page "/crear-codigo-lista"
@using Entities.Entidades_Definicion
@rendermode InteractiveServer

<PageTitle>Crear lista de codigos</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100" style="margin-top: -100px">
    <div class="card p-4" style="width: 30rem;">
        <h2>Crear Lista de Códigos</h2>
        <form @onsubmit="CrearCodeList">
            <div class="mb-3">
                <label for="name" class="form-label">Nombre:</label>
                <input type="text" class="form-control" id="name" @bind="NuevaCodeList.Name" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Descripción:</label>
                <textarea class="form-control" id="description" @bind="NuevaCodeList.Description" rows="3" required></textarea>
            </div>
            <div class="mb-3">
                <label for="codeFormat" class="form-label">Formato de Código:</label>
                <input type="text" class="form-control" id="codeFormat" @bind="NuevaCodeList.CodeFormat" required>
            </div>
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-danger w-50">Guardar</button>
            </div>
        </form>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 11;">
    @foreach (var toast in Toasts)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="background-color:white; border-color:lightgray;">
            <div class="toast-header" style="background-color:lightgray;">
                <strong class="me-auto">Notificación</strong>
                <button type="button" class="btn-close" @onclick="() => CerrarToast(toast.Id)"></button>
            </div>
            <div class="toast-body">
                @toast.Message
            </div>
        </div>
    }
</div>

@code {
    private CodeList NuevaCodeList = new CodeList();
    private List<ToastMessage> Toasts = new List<ToastMessage>();

    private void CrearCodeList()
    {
        Console.WriteLine($"Lista de códigos creada: {NuevaCodeList.Name} - {NuevaCodeList.Description}");
        ListadoCodigos.CodeLists.Add(NuevaCodeList); // Agregar la nueva lista de códigos a la colección
        NuevaCodeList = new CodeList(); // Reiniciar el formulario

        // Mostrar un nuevo Toast
        AgregarToast("Nueva lista de códigos creada.");
    }

    private void AgregarToast(string message)
    {
        var toast = new ToastMessage
            {
                Id = Guid.NewGuid(),
                Message = message
            };

        Toasts.Add(toast);
        StateHasChanged();

        // Configurar el temporizador para eliminar el Toast después de 5 segundos
        _ = RemoverToastDespuesDeTiempo(toast.Id, 5000);
    }

    private async Task RemoverToastDespuesDeTiempo(Guid toastId, int delay)
    {
        await Task.Delay(delay);
        CerrarToast(toastId);
    }

    private void CerrarToast(Guid toastId)
    {
        var toast = Toasts.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            Toasts.Remove(toast);
            StateHasChanged();
        }
    }

    private class ToastMessage
    {
        public Guid Id { get; set; }
        public string Message { get; set; }
    }
}