@page "/crear-mensaje"
@using Entities.Entidades_Definicion
@using ProyectoEDI.Components.Services
@using Entities.Model.Enum
@rendermode InteractiveServer
<PageTitle>Crear Mensaje</PageTitle>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<div class="container d-flex justify-content-center align-items-center vh-100" style="margin-top:-80px">
    <div class="card p-4 navbar-nav-scroll" style="width: 40rem;">
        <h2 class="text-center mb-4">Crear Mensaje</h2>

        <EditForm Model= "Mensaje" OnValidSubmit="CrearMensaj">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="tipo" class="form-label">Tipo de Mensaje</label>
                <InputSelect @bind-Value="Mensaje.MessageType" class="form-select">
                    <option value="" disabled selected>Seleccione un tipo...</option>
                    @foreach (var tipo in Enum.GetValues(typeof(TipoDocumento)))
                    {
                        <option value="@tipo">@tipo</option>
                    }
                </InputSelect>
				<ValidationMessage For="@(() => Mensaje.MessageType)" />
                <!--
                <select class="form-select" id="tipo" @bind = "Mensaje.MessageType">
                    <option value="" disabled selected>Seleccione un tipo...</option>
                    @foreach (var tipo in Enum.GetValues(typeof(MessageTypeEnum)))
                    {
                        <option value="@tipo">@tipo</option>
                    }
                </select>
                -->
            </div>

            <div class="mb-3">
                <label for="version" class="form-label">Versión:</label>
                <InputText type="text" class="form-control" id="version" name="version"  @bind-value="Mensaje.Version" />
				<ValidationMessage For="@(() => Mensaje.Version)" />

            </div>

            <div class="mb-3">
                <label for="release" class="form-label">Release:</label>
                <InputText type="text" class="form-control" id="release" name="release" @bind-value="Mensaje.Release" />
				<ValidationMessage For="@(() => Mensaje.Release)" />
            </div>

            <div class="mb-3">
                <label for="directoryVersion" class="form-label">Directory:</label>
                <InputText type="text" class="form-control" id="directoryVersion" name="directoryVersion" @bind-value="Mensaje.DirectoryVersion" />
                <ValidationMessage For="@(() => Mensaje.Directory)" />
            </div>

            <div class="mb-3">
                <label for="directoryVersion" class="form-label">Directory Version:</label>
                <InputText type="text" class="form-control" id="directoryVersion" name="directoryVersion" @bind-value="Mensaje.DirectoryVersion" />
				<ValidationMessage For="@(() => Mensaje.DirectoryVersion)" />
            </div>

            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre:</label>
                <InputText type="text" class="form-control" id="nombre" name="nombre" @bind-value="Mensaje.Name" />
                <ValidationMessage For="@(() => Mensaje.Name)" />
            </div>

            <div class="mb-3">
                <label for="descripcion" class="form-label">Descripcion:</label>
                <InputTextArea class="form-control" id="descripcion" name="descripcion" rows="3" style="max-height:200px" @bind-value="Mensaje.Description" />
                <ValidationMessage For="@(() => Mensaje.Description)" />
            </div>


            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-danger w-50">Enviar</button>
            </div>

        </EditForm>
    </div>
</div>

@code {
    private Message Mensaje = new Message();
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Mensaje agregado",
            HelpText = $"{DateTime.Now}",
            Message = $"Se añadio un Mensaje con exito: {DateTime.Now}",
        };

    private void CrearMensaj()
    {
        Console.WriteLine($"Mensaje creado: {Mensaje.Name}"); // Depuración
        Console.WriteLine($"Tipo: {Mensaje.MessageType}, Versión: {Mensaje.Version}, Release: {Mensaje.Release}");
        ListarMensaje.Messages.Add(Mensaje);// Añadir el mensaje
        Mensaje = new Message(); // Reiniciar el formulario

        //Mostrar un Toast
        ShowMessage(ToastType.Success);
    }
}