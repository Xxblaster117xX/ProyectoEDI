@page "/listado-edi"
@using ProyectoEDI.Components.Services
@using Entities.Entidades_Representacion.Abstract
@using Entities.Entidades_Representacion.Segments
@inject NavigationManager Navigation
@inject SegmentService SegmentService
@rendermode InteractiveServer
<PageTitle>Listar Mensaje</PageTitle>

<ConfirmDialog @ref="Dialogo" />

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<h3 class="text-center">Listado de Segmentos:</h3>

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th>Codigo</th>
                <th>Nombre</th>
                <th>Descripcion</th>
                <th>Obligatorio</th>

                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (Segments != null && Segments.Any())
            {
                Console.WriteLine("Segmentos encontrados: " + SegmentService.GetSegments().Count);
                @foreach (var s in Segments)
                {
                    <tr>
                        <td>@s.Codigo</td>
                        <td>@s.Nombre</td>
                        <td>@s.Descripcion</td>
                        <td>@s.Obligatorio</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => Modificar(s.Id)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ShowConfirmationAsync(s.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No hay segmentos disponibles</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@code {

    public static List<Segment> Segments = new List<Segment>();
    List<ToastMessage> messages = new List<ToastMessage>();

    private ConfirmDialog Dialogo = default!;

    private async Task ShowConfirmationAsync(int Id)
    {
        var confirmation = await Dialogo.ShowAsync(
            title: "¿Quieres eliminar el segmento?",
            message1: "Una vez hecho esto, no se podra deshacer.",
            new ConfirmDialogOptions
                {
                    YesButtonText = "Si",
                    YesButtonColor = ButtonColor.Danger,
                    NoButtonText = "No",
                    NoButtonColor = ButtonColor.Primary
                });


        if (confirmation)
        {
            // do something
            Console.WriteLine("Segmento eliminado");
            EliminarSegmento(Id);
        }
    }

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Segmento eliminado",
            HelpText = $"{DateTime.Now}",
            Message = $"Segmento eliminado con exito: {DateTime.Now}",
        };

    private void Modificar(int Id)
    {
        Console.WriteLine("Entra al metodo Modificar");
        Navigation.NavigateTo($"/modificar-segmento/{Id}");
    }
	private void EliminarSegmento(int Id)
	{
		Console.WriteLine("Entra al metodo Eliminar");
        Console.WriteLine($"Eliminar segmento con ID: {Id}");
        Segment S = Segments.FirstOrDefault(c => c.Id == Id);
        if (S != null)
        {
            Segments.Remove(S);
            Console.WriteLine($"Lista de códigos eliminada: {S.Nombre}");
        }
        ShowMessage(ToastType.Success);
	}
}