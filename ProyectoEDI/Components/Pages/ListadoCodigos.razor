@page "/listado-codigos"
@using Entities.Entidades_Definicion
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Listas de codigos</PageTitle>

<ConfirmDialog @ref="Dialogo" />

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<div class="container">
    <div class="d-flex" style="margin-bottom: 20px;">
        <h2 class="justify-content-center w-100">Listas de Códigos</h2> 
        <button style="width:55px; height:55px;" class="btn btn-danger rounded-circle" @onclick="() => AnyadirCodeList()">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
            </svg>
        </button>
    </div>
    <div class="navbar-nav-scroll">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Formato de Código</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (CodeLists != null && CodeLists.Any())
                {
                    @foreach (var codeList in CodeLists)
                    {
                        <tr @onmousedown="(e) => AccionesMouseTr(e, codeList.Id)">
                            <td>@codeList.Name</td>
                            <td>@codeList.Description</td>
                            <td>@codeList.CodeFormat</td>
                            <td>
                                <button class="btn btn-info btn-sm" @onclick="() => VerCodeList(codeList.Id)">Ver</button>
                                <button class="btn btn-warning btn-sm" @onclick="() => VerCodeList(codeList.Id)">Editar</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EditarCodeList(codeList.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr class="">
                        <td colspan="7" class="text-center">No hay mensajes disponibles</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public static List<CodeList> CodeLists = new List<CodeList>();
    List<ToastMessage> messages = new List<ToastMessage>();

    private ConfirmDialog Dialogo = default!;

    private async Task ShowConfirmationAsync(int Id)
    {
        var confirmation = await Dialogo.ShowAsync(
            title: "¿Quieres eliminar el mensaje?",
            message1: "Una vez hecho esto, no se podra deshacer.",
            new ConfirmDialogOptions
                {
                    YesButtonText = "Si",
                    YesButtonColor = ButtonColor.Danger,
                    NoButtonText = "No",
                    NoButtonColor = ButtonColor.Primary
                });


        if (confirmation)
        {
            // do something
            Console.WriteLine("Mensaje eliminado");
            EliminarCodeList(Id);
        }
    }

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "CodeList eliminado",
            HelpText = $"{DateTime.Now}",
            Message = $"CodeList eliminado con exito: {DateTime.Now}",
        };

    private void AnyadirCodeList()
    {
        Console.WriteLine("Añadir lista de códigos");
        NavigationManager.NavigateTo("/crear-codigo-lista");
    }

    private void VerCodeList(int Id)
    {
        Console.WriteLine($"Ver lista de códigos con ID: {Id}");
        NavigationManager.NavigateTo($"/ver-lista-codigo/{Id}");
    }

    private void EditarCodeList(int Id)
    {
        Console.WriteLine($"Editar lista de códigos con ID: {Id}");
        NavigationManager.NavigateTo($"/modificar-lista-codigo/{Id}");
    }

    private void EliminarCodeList(int Id)
    {
        Console.WriteLine($"Eliminar lista de códigos con ID: {Id}");
        CodeList Cl = CodeLists.FirstOrDefault(c => c.Id == Id);
        if (Cl != null)
        {
            CodeLists.Remove(Cl);
            Console.WriteLine($"Lista de códigos eliminada: {Cl.Name}");
        } 
		ShowMessage(ToastType.Success);
    }

    private void AccionesMouseTr(MouseEventArgs e, int Id)
    {


        if (e.Button == 1) // Click central (Rueda del mouse)
        {
            Console.WriteLine($"Botón central presionado en el mensaje con ID: {Id}");
            ShowConfirmationAsync(Id);
        }
        if (e.Button == 0 && e.CtrlKey == true) // Click izquierdo y Control a la vez
        {
            Console.WriteLine($"Botón izquierdo y Control presionado en el mensaje con ID: {Id}");
            VerCodeList(Id);
        }
        if (e.Button == 0 && e.AltKey == true) // Click izquierdo y Control a la vez
        {
            Console.WriteLine($"Botón izquierdo y Alt presionado en el mensaje con ID: {Id}");
            EditarCodeList(Id);
        }
    }
}